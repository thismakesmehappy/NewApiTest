openapi: 3.0.3
info:
  title: ToyApi
  description: A serverless toy API using AWS free tier services
  version: 1.0.0
  contact:
    name: ToyApi Support
    email: bernardo+toyAPI@thismakesmehappy.co

servers:
  - url: https://toyapi.thismakesmehappy.co
    description: Production server
  - url: https://stage.toyapi.thismakesmehappy.co
    description: Staging server
  - url: https://dev.toyapi.thismakesmehappy.co
    description: Development server

paths:
  /public/message:
    get:
      tags:
        - Public
      summary: Get public message
      description: Returns a public message that anyone can access
      operationId: getPublicMessage
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/login:
    post:
      tags:
        - Authentication
      summary: User login
      description: Authenticate user and return JWT token
      operationId: login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/message:
    get:
      tags:
        - Authentication
      summary: Get authenticated message
      description: Returns a message for authenticated users
      operationId: getAuthenticatedMessage
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/user/{userId}/message:
    get:
      tags:
        - Authentication
      summary: Get user-specific message
      description: Returns a personalized message for a specific user
      operationId: getUserMessage
      security:
        - BearerAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          description: User ID
          schema:
            type: string
            example: "user-12345"
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserMessageResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden - user can only access their own messages
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /items:
    get:
      tags:
        - Items
      summary: List items
      description: Get all items for the authenticated user
      operationId: listItems
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ItemListResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    post:
      tags:
        - Items
      summary: Create item
      description: Create a new item for the authenticated user
      operationId: createItem
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateItemRequest'
      responses:
        '201':
          description: Item created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Item'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /items/{id}:
    get:
      tags:
        - Items
      summary: Get item
      description: Get a specific item by ID
      operationId: getItem
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Item ID
          schema:
            type: string
            example: "item-12345"
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Item'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden - user can only access their own items
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Item not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    put:
      tags:
        - Items
      summary: Update item
      description: Update an existing item
      operationId: updateItem
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Item ID
          schema:
            type: string
            example: "item-12345"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateItemRequest'
      responses:
        '200':
          description: Item updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Item'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden - user can only update their own items
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Item not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    delete:
      tags:
        - Items
      summary: Delete item
      description: Delete an existing item
      operationId: deleteItem
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Item ID
          schema:
            type: string
            example: "item-12345"
      responses:
        '204':
          description: Item deleted successfully
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden - user can only delete their own items
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Item not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    MessageResponse:
      type: object
      required:
        - message
        - timestamp
      properties:
        message:
          type: string
          example: "Hello from ToyApi!"
        timestamp:
          type: string
          format: date-time
          example: "2024-01-15T10:30:00Z"

    UserMessageResponse:
      type: object
      required:
        - message
        - userId
        - timestamp
      properties:
        message:
          type: string
          example: "Hello John! This is your personalized message."
        userId:
          type: string
          example: "user-12345"
        timestamp:
          type: string
          format: date-time
          example: "2024-01-15T10:30:00Z"

    LoginRequest:
      type: object
      required:
        - username
        - password
      properties:
        username:
          type: string
          minLength: 3
          maxLength: 50
          example: "john.doe"
        password:
          type: string
          minLength: 6
          maxLength: 100
          example: "securePassword123"

    AuthResponse:
      type: object
      required:
        - token
        - userId
        - expiresIn
      properties:
        token:
          type: string
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        userId:
          type: string
          example: "user-12345"
        expiresIn:
          type: integer
          format: int32
          example: 3600
          description: Token expiration time in seconds

    Item:
      type: object
      required:
        - id
        - message
        - userId
        - createdAt
        - updatedAt
      properties:
        id:
          type: string
          example: "item-12345"
        message:
          type: string
          minLength: 1
          maxLength: 1000
          example: "My important item message"
        userId:
          type: string
          example: "user-12345"
        createdAt:
          type: string
          format: date-time
          example: "2024-01-15T10:30:00Z"
        updatedAt:
          type: string
          format: date-time
          example: "2024-01-15T10:30:00Z"

    CreateItemRequest:
      type: object
      required:
        - message
      properties:
        message:
          type: string
          minLength: 1
          maxLength: 1000
          example: "My new item message"

    UpdateItemRequest:
      type: object
      required:
        - message
      properties:
        message:
          type: string
          minLength: 1
          maxLength: 1000
          example: "My updated item message"

    ItemListResponse:
      type: object
      required:
        - items
        - count
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/Item'
        count:
          type: integer
          format: int32
          example: 5

    ErrorResponse:
      type: object
      required:
        - error
        - message
        - timestamp
      properties:
        error:
          type: string
          example: "BAD_REQUEST"
        message:
          type: string
          example: "Invalid request parameters"
        timestamp:
          type: string
          format: date-time
          example: "2024-01-15T10:30:00Z"
        details:
          type: string
          example: "The 'message' field is required and cannot be empty"