name: ToyApi CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
    types: [ opened, synchronize, reopened, closed ]

env:
  JAVA_VERSION: '17'
  NODE_VERSION: '18'
  AWS_REGION: us-east-1

jobs:
  approval-gate:
    name: Deployment Approval
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment: 
      name: deployment-approval
      url: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
    steps:
    - name: Request Deployment Approval
      run: |
        echo "üö® Deployment approval requested for:"
        echo "- Repository: ${{ github.repository }}"
        echo "- Branch: ${{ github.ref_name }}"
        echo "- Commit: ${{ github.sha }}"
        echo "- Author: ${{ github.actor }}"
        echo ""
        echo "This will deploy to STAGING and PRODUCTION environments."
        echo "Review the changes and approve to proceed with the full pipeline."

  test:
    name: Build and Test
    runs-on: ubuntu-latest
    needs: approval-gate
    if: always() && (needs.approval-gate.result == 'success' || github.event_name == 'pull_request')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        
    - name: Cache Maven dependencies
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
        
    - name: Run unit tests only (no AWS dependencies)
      run: |
        # Run tests but exclude AWS-dependent tests that require credentials
        cd service
        mvn clean test -Dtest='!co.thismakesmehappy.toyapi.service.AnalyticsHandlerTest,!co.thismakesmehappy.toyapi.service.AnalyticsReportHandlerTest' -Dsurefire.failIfNoSpecifiedTests=false
      env:
        # Disable AWS credentials to test fallback behavior
        AWS_ACCESS_KEY_ID: ""
        AWS_SECRET_ACCESS_KEY: ""
        AWS_PROFILE: ""
      
    - name: Build service
      run: |
        # Build and install all modules to local repository for integration tests
        mvn clean install -DskipTests
        
    # No unit tests to upload - integration tests run during deployment phases
          
    - name: Upload service JAR
      uses: actions/upload-artifact@v4
      with:
        name: service-jar
        path: service/target/*.jar

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        
    - name: Cache Maven dependencies
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
        
    - name: Run dependency check
      run: |
        # Run security scan but don't fail the build on vulnerabilities in CI/CD
        mvn org.owasp:dependency-check-maven:check -DfailBuildOnCVSS=10 -DskipTestScope=true || \
        mvn org.owasp:dependency-check-maven:check -DfailBuildOnCVSS=10 -DskipTestScope=true -DcveDataProviderUrl=none
      continue-on-error: true
        
    - name: Upload security scan results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-scan-results
        path: |
          **/target/dependency-check-report.html
        if-no-files-found: warn

  deploy-dev:
    name: Deploy to Development
    runs-on: ubuntu-latest
    needs: [test, security-scan]
    if: github.event_name == 'push' && contains(github.event.head_commit.message, '[deploy-dev]')
    concurrency:
      group: deploy-dev
      cancel-in-progress: false
    
    steps:
    - name: Cancel superseded dev deployments
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        echo "üîç Checking for superseded development deployments..."
        
        # Get current run info
        CURRENT_RUN_ID="${{ github.run_id }}"
        CURRENT_SHA="${{ github.sha }}"
        
        # Find other running workflows on dev route (with [deploy-dev])
        gh api repos/${{ github.repository }}/actions/runs \
          --jq '.workflow_runs[] | select(.status == "in_progress" or .status == "queued") | select(.name == "ToyApi CI/CD Pipeline") | select(.id != '$CURRENT_RUN_ID') | select(.head_commit.message | contains("[deploy-dev]")) | "\\(.id) \\(.head_sha) \\(.created_at)"' \
          | while read run_id sha created_at; do
            if [ -n "$run_id" ]; then
              echo "üìÖ Found superseded dev deployment: Run $run_id (SHA: ${sha:0:7}) from $created_at"
              echo "‚ùå Cancelling superseded run $run_id with explanatory comment..."
              
              # Cancel with explanatory comment
              gh api repos/${{ github.repository }}/actions/runs/$run_id/cancel -X POST || echo "‚ö†Ô∏è  Could not cancel run $run_id (may already be completed)"
              
              # Create commit status to explain the cancellation
              gh api repos/${{ github.repository }}/statuses/$sha -X POST \
                --field state=error \
                --field context="ci/deployment-superseded" \
                --field description="Cancelled: Newer dev deployment takes precedence (Run #${{ github.run_id }})" \
                --field target_url="https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}" \
                2>/dev/null || echo "üí¨ Could not create commit status"
              
              # Add a comment explaining the cancellation
              gh pr comment --repo ${{ github.repository }} --body "ü§ñ **Automated Pipeline Management**: Run #$run_id was automatically cancelled because a newer commit is deploying to the same environment. **Reason**: Smart cancellation - newer development deployment takes precedence. **Cancelled by**: Run #${{ github.run_id }} (SHA: ${{ github.sha }}). **Route**: Development deployment (\`[deploy-dev]\` flag). This is part of the advanced CI/CD pipeline orchestration to prevent deployment conflicts." 2>/dev/null || echo "üí¨ Could not add PR comment (no associated PR)"
            fi
          done
        
        echo "‚úÖ Superseded deployment check complete"
    
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        
    - name: Set up Node.js ${{ env.NODE_VERSION }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        
    - name: Install AWS CDK
      run: npm install -g aws-cdk
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: Cache Maven dependencies
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
        
    - name: Build service
      run: |
        # Build and install all modules to local repository for integration tests
        mvn clean install -DskipTests
        
    - name: Bootstrap CDK (if needed)
      run: |
        cd infra
        export ENVIRONMENT=dev
        cdk bootstrap --context environment=${ENVIRONMENT}
        
    - name: Show infrastructure changes
      run: |
        cd infra
        export ENVIRONMENT=dev
        cdk diff ToyApiStack-${ENVIRONMENT} --context environment=${ENVIRONMENT} || true
        cdk diff ToyApiMonitoring-${ENVIRONMENT} --context environment=${ENVIRONMENT} || true
        
    - name: Deploy main infrastructure
      run: |
        cd infra
        export ENVIRONMENT=dev
        cdk deploy ToyApiStack-${ENVIRONMENT} --context environment=${ENVIRONMENT} --require-approval never
        
    - name: Deploy monitoring stack
      run: |
        cd infra
        export ENVIRONMENT=dev
        cdk deploy ToyApiMonitoring-${ENVIRONMENT} --context environment=${ENVIRONMENT} --require-approval never
        
    - name: Run integration tests
      run: |
        # Run integration tests from project root to ensure dependencies are available
        mvn test -pl integration-tests -Dtest.environment=dev
      continue-on-error: true
      
    - name: Upload deployment logs
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: dev-deployment-logs
        path: |
          infra/cdk.out/
          integration-tests/target/

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [test, security-scan]
    if: ((github.event_name == 'push' && github.ref == 'refs/heads/main') || (github.event_name == 'pull_request' && github.event.pull_request.merged == true && github.event.pull_request.base.ref == 'main')) && !contains(github.event.head_commit.message, '[deploy-dev]')
    concurrency:
      group: deploy-staging-prod
      cancel-in-progress: false
    
    steps:
    - name: Cancel superseded staging-prod deployments
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        echo "üîç Checking for superseded staging-production deployments..."
        
        # Get current run info
        CURRENT_RUN_ID="${{ github.run_id }}"
        CURRENT_SHA="${{ github.sha }}"
        
        # Find other running workflows on staging-prod route (without [deploy-dev])
        gh api repos/${{ github.repository }}/actions/runs \
          --jq '.workflow_runs[] | select(.status == "in_progress" or .status == "queued") | select(.name == "ToyApi CI/CD Pipeline") | select(.id != '$CURRENT_RUN_ID') | select(.head_commit.message | contains("[deploy-dev]") | not) | "\\(.id) \\(.head_sha) \\(.created_at)"' \
          | while read run_id sha created_at; do
            if [ -n "$run_id" ]; then
              echo "üìÖ Found superseded staging-prod deployment: Run $run_id (SHA: ${sha:0:7}) from $created_at"
              echo "‚ùå Cancelling superseded run $run_id with explanatory comment..."
              
              # Cancel with explanatory comment
              gh api repos/${{ github.repository }}/actions/runs/$run_id/cancel -X POST || echo "‚ö†Ô∏è  Could not cancel run $run_id (may already be completed)"
              
              # Create commit status to explain the cancellation
              gh api repos/${{ github.repository }}/statuses/$sha -X POST \
                --field state=error \
                --field context="ci/deployment-superseded" \
                --field description="Cancelled: Newer staging-prod deployment takes precedence (Run #${{ github.run_id }})" \
                --field target_url="https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}" \
                2>/dev/null || echo "üí¨ Could not create commit status"
              
              # Add a comment explaining the cancellation
              gh pr comment --repo ${{ github.repository }} --body "ü§ñ **Automated Pipeline Management**: Run #$run_id was automatically cancelled because a newer commit is deploying to the same environments. **Reason**: Smart cancellation - newer staging/production deployment takes precedence. **Cancelled by**: Run #${{ github.run_id }} (SHA: ${{ github.sha }}). **Route**: Staging ‚Üí Production deployment (main branch). This is part of the advanced CI/CD pipeline orchestration to prevent deployment conflicts and ensure the latest changes are deployed." 2>/dev/null || echo "üí¨ Could not add PR comment (no associated PR)"
            fi
          done
        
        echo "‚úÖ Superseded deployment check complete"
    
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        
    - name: Set up Node.js ${{ env.NODE_VERSION }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        
    - name: Install AWS CDK
      run: npm install -g aws-cdk
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: Cache Maven dependencies
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
        
    - name: Build service
      run: |
        # Build and install all modules to local repository for integration tests
        mvn clean install -DskipTests
        
    - name: Bootstrap CDK (if needed)
      run: |
        cd infra
        export ENVIRONMENT=stage
        cdk bootstrap --context environment=${ENVIRONMENT}
        
    - name: Show infrastructure changes
      run: |
        cd infra
        export ENVIRONMENT=stage
        cdk diff ToyApiStack-${ENVIRONMENT} --context environment=${ENVIRONMENT} || true
        cdk diff ToyApiMonitoring-${ENVIRONMENT} --context environment=${ENVIRONMENT} || true
        
    - name: Deploy main infrastructure
      run: |
        cd infra
        export ENVIRONMENT=stage
        cdk deploy ToyApiStack-${ENVIRONMENT} --context environment=${ENVIRONMENT} --require-approval never
        
    - name: Deploy monitoring stack
      run: |
        cd infra
        export ENVIRONMENT=stage
        cdk deploy ToyApiMonitoring-${ENVIRONMENT} --context environment=${ENVIRONMENT} --require-approval never
        
    - name: Run full integration tests (staging only)
      run: |
        # Run ALL tests in staging - comprehensive validation before production
        mvn test -pl integration-tests -Dtest.environment=stage
        
    - name: Upload deployment logs
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: staging-deployment-logs
        path: |
          infra/cdk.out/
          integration-tests/target/

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    concurrency:
      group: deploy-staging-prod
      cancel-in-progress: false
    
    steps:
    - name: Cancel superseded staging-prod deployments
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        echo "üîç Checking for superseded staging-production deployments..."
        
        # Get current run info
        CURRENT_RUN_ID="${{ github.run_id }}"
        CURRENT_SHA="${{ github.sha }}"
        
        # Find other running workflows on staging-prod route (without [deploy-dev])
        gh api repos/${{ github.repository }}/actions/runs \
          --jq '.workflow_runs[] | select(.status == "in_progress" or .status == "queued") | select(.name == "ToyApi CI/CD Pipeline") | select(.id != '$CURRENT_RUN_ID') | select(.head_commit.message | contains("[deploy-dev]") | not) | "\\(.id) \\(.head_sha) \\(.created_at)"' \
          | while read run_id sha created_at; do
            if [ -n "$run_id" ]; then
              echo "üìÖ Found superseded staging-prod deployment: Run $run_id (SHA: ${sha:0:7}) from $created_at"
              echo "‚ùå Cancelling superseded run $run_id with explanatory comment..."
              
              # Cancel with explanatory comment
              gh api repos/${{ github.repository }}/actions/runs/$run_id/cancel -X POST || echo "‚ö†Ô∏è  Could not cancel run $run_id (may already be completed)"
              
              # Create commit status to explain the cancellation
              gh api repos/${{ github.repository }}/statuses/$sha -X POST \
                --field state=error \
                --field context="ci/deployment-superseded" \
                --field description="Cancelled: Newer production deployment takes precedence (Run #${{ github.run_id }})" \
                --field target_url="https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}" \
                2>/dev/null || echo "üí¨ Could not create commit status"
              
              # Add a comment explaining the cancellation
              gh pr comment --repo ${{ github.repository }} --body "ü§ñ **Automated Pipeline Management**: Run #$run_id was automatically cancelled because a newer commit is deploying to the same environments. **Reason**: Smart cancellation - newer staging/production deployment takes precedence. **Cancelled by**: Run #${{ github.run_id }} (SHA: ${{ github.sha }}). **Route**: Staging ‚Üí Production deployment (main branch). **Stage**: Production deployment phase. This is part of the advanced CI/CD pipeline orchestration to prevent deployment conflicts and ensure the latest changes are deployed." 2>/dev/null || echo "üí¨ Could not add PR comment (no associated PR)"
            fi
          done
        
        echo "‚úÖ Superseded deployment check complete"
    
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        
    - name: Set up Node.js ${{ env.NODE_VERSION }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        
    - name: Install AWS CDK
      run: npm install -g aws-cdk
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: Cache Maven dependencies
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
        
    - name: Build service
      run: |
        # Build and install all modules to local repository for integration tests
        mvn clean install -DskipTests
        
    - name: Bootstrap CDK (if needed)
      run: |
        cd infra
        export ENVIRONMENT=prod
        cdk bootstrap --context environment=${ENVIRONMENT}
        
    - name: Show infrastructure changes
      run: |
        cd infra
        export ENVIRONMENT=prod
        cdk diff ToyApiStack-${ENVIRONMENT} --context environment=${ENVIRONMENT} || true
        cdk diff ToyApiMonitoring-${ENVIRONMENT} --context environment=${ENVIRONMENT} || true
        
    - name: Deploy main infrastructure
      run: |
        cd infra
        export ENVIRONMENT=prod
        cdk deploy ToyApiStack-${ENVIRONMENT} --context environment=${ENVIRONMENT} --require-approval never
        
    - name: Deploy monitoring stack
      run: |
        cd infra
        export ENVIRONMENT=prod
        cdk deploy ToyApiMonitoring-${ENVIRONMENT} --context environment=${ENVIRONMENT} --require-approval never
        
    - name: Run unit tests, health checks, and smoke tests only
      run: |
        # Production: Run unit tests (no AWS dependencies)  
        cd service
        mvn clean test -Dtest='!co.thismakesmehappy.toyapi.service.AnalyticsHandlerTest,!co.thismakesmehappy.toyapi.service.AnalyticsReportHandlerTest,!co.thismakesmehappy.toyapi.service.ParameterStoreHelperUnitTest' -Dsurefire.failIfNoSpecifiedTests=false
        cd ..
        
        # Production: Run only health checks and smoke tests (read-only validation)
        mvn test -pl integration-tests -Dtest.environment=prod -Dgroups="health,smoke"
        
    - name: Upload deployment logs
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: production-deployment-logs
        path: |
          infra/cdk.out/
          integration-tests/target/

  notify:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: [deploy-dev, deploy-staging, deploy-production]
    if: always() && (needs.deploy-dev.result != 'skipped' || needs.deploy-staging.result != 'skipped' || needs.deploy-production.result != 'skipped')
    
    steps:
    - name: Notify success
      if: needs.deploy-production.result == 'success' || needs.deploy-staging.result == 'success' || needs.deploy-dev.result == 'success'
      run: |
        echo "‚úÖ Deployment completed successfully!"
        echo "- Dev: ${{ needs.deploy-dev.result }}"
        echo "- Staging: ${{ needs.deploy-staging.result }}"  
        echo "- Production: ${{ needs.deploy-production.result }}"
        
    - name: Notify failure
      if: needs.deploy-production.result == 'failure' || needs.deploy-staging.result == 'failure' || needs.deploy-dev.result == 'failure'
      run: |
        echo "‚ùå Deployment failed!"
        echo "- Dev: ${{ needs.deploy-dev.result }}"
        echo "- Staging: ${{ needs.deploy-staging.result }}"
        echo "- Production: ${{ needs.deploy-production.result }}"
        exit 1