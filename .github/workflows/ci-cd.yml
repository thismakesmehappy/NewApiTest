name: ToyApi CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  JAVA_VERSION: '17'
  NODE_VERSION: '18'
  AWS_REGION: us-east-1

jobs:
  test:
    name: Build and Test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        
    - name: Cache Maven dependencies
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
        
    - name: Run tests
      run: mvn clean test
      
    - name: Build service
      run: |
        # Build from root to ensure all modules are built in correct order
        mvn clean package
        
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results
        path: |
          **/target/surefire-reports/
          **/target/failsafe-reports/
          
    - name: Upload service JAR
      uses: actions/upload-artifact@v4
      with:
        name: service-jar
        path: service/target/*.jar

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        
    - name: Cache Maven dependencies
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
        
    - name: Run dependency check
      run: |
        mvn org.owasp:dependency-check-maven:check
        
    - name: Upload security scan results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-scan-results
        path: |
          **/target/dependency-check-report.html

  deploy-dev:
    name: Deploy to Development
    runs-on: ubuntu-latest
    needs: [test, security-scan]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    environment: development
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        
    - name: Set up Node.js ${{ env.NODE_VERSION }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        
    - name: Install AWS CDK
      run: npm install -g aws-cdk
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: Cache Maven dependencies
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
        
    - name: Build service
      run: |
        # Build from root to ensure all modules are built in correct order
        mvn clean package
        
    - name: Deploy to development
      run: |
        cd infra
        chmod +x scripts/deploy-dev.sh
        ./scripts/deploy-dev.sh
        
    - name: Run integration tests
      run: |
        cd integration-tests
        mvn test -Dtest.environment=dev
      continue-on-error: true
      
    - name: Upload deployment logs
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: dev-deployment-logs
        path: |
          infra/cdk.out/
          integration-tests/target/

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [test, security-scan]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        
    - name: Set up Node.js ${{ env.NODE_VERSION }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        
    - name: Install AWS CDK
      run: npm install -g aws-cdk
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: Cache Maven dependencies
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
        
    - name: Build service
      run: |
        # Build from root to ensure all modules are built in correct order
        mvn clean package
        
    - name: Deploy to staging
      run: |
        cd infra
        chmod +x scripts/deploy-stage.sh
        ./scripts/deploy-stage.sh
        
    - name: Run integration tests
      run: |
        cd integration-tests
        mvn test -Dtest.environment=stage
        
    - name: Upload deployment logs
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: staging-deployment-logs
        path: |
          infra/cdk.out/
          integration-tests/target/

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        
    - name: Set up Node.js ${{ env.NODE_VERSION }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        
    - name: Install AWS CDK
      run: npm install -g aws-cdk
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: Cache Maven dependencies
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
        
    - name: Build service
      run: |
        # Build from root to ensure all modules are built in correct order
        mvn clean package
        
    - name: Deploy to production
      run: |
        cd infra
        chmod +x scripts/deploy-prod.sh
        ./scripts/deploy-prod.sh
        
    - name: Run smoke tests
      run: |
        cd integration-tests
        mvn test -Dtest.environment=prod -Dtest.suite=smoke
        
    - name: Upload deployment logs
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: production-deployment-logs
        path: |
          infra/cdk.out/
          integration-tests/target/

  notify:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: [deploy-dev, deploy-staging, deploy-production]
    if: always() && (needs.deploy-dev.result != 'skipped' || needs.deploy-staging.result != 'skipped' || needs.deploy-production.result != 'skipped')
    
    steps:
    - name: Notify success
      if: needs.deploy-production.result == 'success' || needs.deploy-staging.result == 'success' || needs.deploy-dev.result == 'success'
      run: |
        echo "✅ Deployment completed successfully!"
        echo "- Dev: ${{ needs.deploy-dev.result }}"
        echo "- Staging: ${{ needs.deploy-staging.result }}"  
        echo "- Production: ${{ needs.deploy-production.result }}"
        
    - name: Notify failure
      if: needs.deploy-production.result == 'failure' || needs.deploy-staging.result == 'failure' || needs.deploy-dev.result == 'failure'
      run: |
        echo "❌ Deployment failed!"
        echo "- Dev: ${{ needs.deploy-dev.result }}"
        echo "- Staging: ${{ needs.deploy-staging.result }}"
        echo "- Production: ${{ needs.deploy-production.result }}"
        exit 1